import React, { useState, useEffect } from "react";

// Simple, self-contained React single-file app for previewing the PawConnect UI
// Tailwind classes are used (the canvas preview supports Tailwind-like utilities).

export default function PawConnectApp() {
  const [screen, setScreen] = useState("splash");
  const [battery, setBattery] = useState(78); // simulated %
  const [heartRate, setHeartRate] = useState(88);
  const [emotion, setEmotion] = useState("Calm");
  const [isPlaying, setIsPlaying] = useState(false);
  const [micOn, setMicOn] = useState(false);
  const [alerts, setAlerts] = useState([
    { time: "10:12 AM", text: "Elevated heartbeat detected" },
    { time: "Yesterday", text: "GPS boundary alert" },
  ]);
  const [history, setHistory] = useState([
    { date: "Oct 24", note: "Calm walk, HR normal" },
    { date: "Oct 23", note: "Anxious during thunder" },
  ]);
  const dogName = "Buddy"; // simulated dog name

  // Simulate small heart-rate changes over time
  useEffect(() => {
    if (screen !== "splash") {
      const id = setInterval(() => {
        setHeartRate((h) => {
          const delta = Math.round((Math.random() - 0.5) * 4);
          const next = Math.max(60, Math.min(140, h + delta));
          // adjust emotion
          if (next > 110) setEmotion("Stressed");
          else if (next > 90) setEmotion("Alert");
          else setEmotion("Calm");
          return next;
        });
        // slight battery drain while app is open
        setBattery((b) => Math.max(5, b - 0.02));
      }, 1200);
      return () => clearInterval(id);
    }
  }, [screen]);

  // Splash auto-forward
  useEffect(() => {
    if (screen === "splash") {
      const t = setTimeout(() => setScreen("home"), 1200);
      return () => clearTimeout(t);
    }
  }, [screen]);

  const playCalmMusic = () => {
    setIsPlaying((p) => !p);
    if (!isPlaying) {
      // creating an alert in history when music started
      setHistory((h) => [{ date: "Now", note: "Played calming audio" }, ...h]);
    }
  };

  const toggleMic = () => {
    setMicOn((m) => !m);
    if (!micOn) setAlerts((a) => [{ time: "Now", text: "Mic opened by owner" }, ...a]);
  };

  const renderNav = () => (
    <nav className="flex items-center justify-between px-4 py-2 bg-white/60 backdrop-blur rounded-xl shadow-sm">
      <div className="flex items-center gap-3">
        <div className="w-10 h-10 bg-pastel-amber rounded-full flex items-center justify-center">
          <svg width="28" height="28" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 3C10.8 3 9.7 3.6 9 4.5C8.3 3.6 7.2 3 6 3C4.3 3 3 4.3 3 6C3 7.7 4.3 9 6 9C7.2 9 8.3 8.4 9 7.5C9.7 8.4 10.8 9 12 9C13.2 9 14.3 8.4 15 7.5C15.7 8.4 16.8 9 18 9C19.7 9 21 7.7 21 6C21 4.3 19.7 3 18 3C16.8 3 15.7 3.6 15 4.5C14.3 3.6 13.2 3 12 3Z" fill="#FFB4A2" />
          </svg>
        </div>
        <div>
          <div className="text-sm text-slate-500">PawConnect</div>
          <div className="font-semibold">{dogName}</div>
        </div>
      </div>
      <div className="flex items-center gap-3">
        <div className="text-xs text-slate-500">Battery</div>
        <div className="w-20 h-3 bg-slate-100 rounded-full overflow-hidden">
          <div className="h-full rounded-full" style={{ width: `${Math.round(battery)}%`, background: "linear-gradient(90deg,#FFD1DC,#CDEFFF)" }} />
        </div>
        <div className="text-sm text-slate-600">{Math.round(battery)}%</div>
      </div>
    </nav>
  );

  const Home = () => (
    <div className="p-4 space-y-4">
      {renderNav()}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="col-span-2 bg-white rounded-xl p-4 shadow">
          <div className="flex items-center justify-between">
            <div>
              <div className="text-sm text-slate-500">Heart rate</div>
              <div className="text-3xl font-semibold">{heartRate} bpm</div>
              <div className="text-sm text-slate-500 mt-1">State: <span className="font-medium">{emotion}</span></div>
            </div>
            <div className="w-32 h-32 flex items-center justify-center">
              {/* Simple dog illustration */}
              <svg viewBox="0 0 120 120" className="w-28 h-28">
                <rect rx="16" width="120" height="120" fill="#FFF7F0" />
                <g transform="translate(18,20)">
                  <circle cx="20" cy="20" r="16" fill="#FFDAB9" />
                  <circle cx="58" cy="20" r="16" fill="#FFDAB9" />
                  <rect x="8" y="36" width="64" height="36" rx="18" fill="#FFC6A8" />
                </g>
              </svg>
            </div>
          </div>

          <div className="mt-4 flex gap-3">
            <button onClick={playCalmMusic} className="flex-1 py-2 rounded-lg border border-slate-200 bg-white hover:shadow">{isPlaying ? "Stop calming audio" : "Play calming audio"}</button>
            <button onClick={toggleMic} className={`py-2 px-4 rounded-lg ${micOn ? "bg-pastel-amber/30" : "bg-white"} border border-slate-200`}>{micOn ? "Mic ON" : "Open mic"}</button>
            <button onClick={() => setScreen("alerts")} className="py-2 px-4 rounded-lg bg-white border">Alerts</button>
          </div>

        </div>

        <div className="bg-white rounded-xl p-4 shadow">
          <div className="text-sm text-slate-500">Location</div>
          <div className="mt-2 h-40 bg-slate-50 rounded-md flex items-center justify-center text-slate-400">Simulated map (GPS)</div>
          <div className="mt-3 text-xs text-slate-500">Last seen: 3 min ago</div>
          <div className="mt-3 flex gap-2">
            <button onClick={() => setScreen("map")} className="flex-1 py-2 rounded-lg border">Open map</button>
            <button onClick={() => setScreen("profile")} className="py-2 px-3 rounded-lg border">Profile</button>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="bg-white rounded-xl p-4 shadow">
          <div className="flex items-center justify-between">
            <div>
              <div className="text-sm text-slate-500">Behavior history</div>
              <div className="mt-2 text-sm">
                {history.slice(0,3).map((h, i) => (
                  <div key={i} className="py-1 border-b border-slate-100">{h.date} — {h.note}</div>
                ))}
              </div>
            </div>
            <div>
              <button onClick={() => setScreen("history")} className="py-2 px-3 rounded-lg border">See all</button>
            </div>
          </div>
        </div>

        <div className="bg-white rounded-xl p-4 shadow">
          <div className="text-sm text-slate-500">Quick actions</div>
          <div className="mt-3 grid grid-cols-2 gap-2">
            <button className="py-2 rounded-lg border">Play audio</button>
            <button className="py-2 rounded-lg border">Vibrate</button>
            <button className="py-2 rounded-lg border">Locate</button>
            <button className="py-2 rounded-lg border">Battery check</button>
          </div>
        </div>
      </div>

    </div>
  );

  const Map = () => (
    <div className="p-4 space-y-4">
      {renderNav()}
      <div className="bg-white rounded-xl p-6 shadow">
        <div className="text-sm text-slate-500">Map — {dogName}</div>
        <div className="mt-4 h-72 bg-gradient-to-br from-slate-50 to-white rounded-lg flex flex-col items-center justify-center text-slate-400">Simulated map view<br/><small>GPS accuracy: ~6m</small></div>
        <div className="mt-4 flex gap-2">
          <button onClick={() => setScreen("home")} className="py-2 px-3 rounded-lg border">Back</button>
          <button className="py-2 px-3 rounded-lg border">Center on pet</button>
        </div>
      </div>
    </div>
  );

  const Profile = () => (
    <div className="p-4 space-y-4">
      {renderNav()}
      <div className="bg-white rounded-xl p-6 shadow">
        <div className="flex items-center gap-4">
          <div className="w-20 h-20 rounded-xl bg-pastel-amber/30 flex items-center justify-center">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none"><path d="M12 3C10.8 3 9.7 3.6 9 4.5C8.3 3.6 7.2 3 6 3C4.3 3 3 4.3 3 6C3 7.7 4.3 9 6 9C7.2 9 8.3 8.4 9 7.5C9.7 8.4 10.8 9 12 9C13.2 9 14.3 8.4 15 7.5C15.7 8.4 16.8 9 18 9C19.7 9 21 7.7 21 6C21 4.3 19.7 3 18 3C16.8 3 15.7 3.6 15 4.5C14.3 3.6 13.2 3 12 3Z" fill="#FFB4A2" /></svg>
          </div>
          <div>
            <div className="text-xl font-semibold">{dogName}</div>
            <div className="text-sm text-slate-500">Breed: Mixed • Age: 3 yrs</div>
          </div>
        </div>
        <div className="mt-4 grid grid-cols-2 gap-3">
          <div className="p-3 rounded-lg bg-slate-50">
            <div className="text-xs text-slate-500">Allergies</div>
            <div className="mt-2 text-sm">None registered</div>
          </div>
          <div className="p-3 rounded-lg bg-slate-50">
            <div className="text-xs text-slate-500">Medical notes</div>
            <div className="mt-2 text-sm">Up to date on vaccines</div>
          </div>
        </div>
        <div className="mt-4 flex gap-2">
          <button onClick={() => setScreen("home")} className="py-2 px-3 rounded-lg border">Back</button>
          <button className="py-2 px-3 rounded-lg border">Edit profile</button>
        </div>
      </div>
    </div>
  );

  const History = () => (
    <div className="p-4 space-y-4">
      {renderNav()}
      <div className="bg-white rounded-xl p-6 shadow">
        <div className="text-sm text-slate-500">Behavior history</div>
        <div className="mt-4 space-y-2">
          {history.map((h, i) => (
            <div key={i} className="p-3 rounded-lg bg-slate-50">{h.date} — {h.note}</div>
          ))}
        </div>
        <div className="mt-4">
          <button onClick={() => setScreen("home")} className="py-2 px-3 rounded-lg border">Back</button>
        </div>
      </div>
    </div>
  );

  const Alerts = () => (
    <div className="p-4 space-y-4">
      {renderNav()}
      <div className="bg-white rounded-xl p-6 shadow">
        <div className="text-sm text-slate-500">Alerts</div>
        <div className="mt-4 space-y-2">
          {alerts.map((a, i) => (
            <div key={i} className="p-3 rounded-lg bg-slate-50 flex justify-between"> 
              <div>{a.text}</div>
              <div className="text-xs text-slate-400">{a.time}</div>
            </div>
          ))}
        </div>
        <div className="mt-4">
          <button onClick={() => setScreen("home")} className="py-2 px-3 rounded-lg border">Back</button>
        </div>
      </div>
    </div>
  );

  const Screens = {
    home: <Home />,
    map: <Map />,
    profile: <Profile />,
    history: <History />,
    alerts: <Alerts />,
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-pastel-amber/10 to-white p-6">
      <div className="mx-auto max-w-4xl">
        {screen === "splash" ? (
          <div className="rounded-2xl p-12 bg-white shadow-lg flex flex-col items-center gap-6">
            <div className="text-3xl font-bold">PawConnect</div>
            <div className="text-sm text-slate-500">Connecting you and {dogName} • Demo</div>
            <div className="w-48 h-48 rounded-lg bg-gradient-to-tr from-pink-50 to-blue-50 flex items-center justify-center">
              <svg width="120" height="120" viewBox="0 0 24 24" fill="none"><path d="M12 3C10.8 3 9.7 3.6 9 4.5C8.3 3.6 7.2 3 6 3C4.3 3 3 4.3 3 6C3 7.7 4.3 9 6 9C7.2 9 8.3 8.4 9 7.5C9.7 8.4 10.8 9 12 9C13.2 9 14.3 8.4 15 7.5C15.7 8.4 16.8 9 18 9C19.7 9 21 7.7 21 6C21 4.3 19.7 3 18 3C16.8 3 15.7 3.6 15 4.5C14.3 3.6 13.2 3 12 3Z" fill="#FFB4A2" /></svg>
            </div>
            <div className="mt-3">
              <button onClick={() => setScreen("home")} className="py-2 px-6 rounded-full bg-white border shadow">Open demo</button>
            </div>
          </div>
        ) : (
          <div className="rounded-2xl bg-transparent">
            {Screens[screen]}
          </div>
        )}
      </div>
    </div>
  );
}

